Given a string s, return the length of the longest substring between two equal characters, excluding the two characters. If there is no such substring return -1.

A substring is a contiguous sequence of characters within a string.

 

Example 1:

Input: s = "aa"
Output: 0
Explanation: The optimal substring here is an empty substring between the two 'a's.
Example 2:

Input: s = "abca"
Output: 2
Explanation: The optimal substring here is "bc".

Code - 
class Solution {
    public int maxLengthBetweenEqualCharacters(String s) {
    int[] v1 = new int[26];
    int[] v2 = new int[26];
    int count = -1;
    Arrays.fill(v1,-1);
    Arrays.fill(v2,-1);

    for(int i=0; i<s.length(); i++){
        int temp = s.charAt(i) - 'a';
        if(v1[temp] == -1){
            v1[temp] = i;
        }
        else {
            v2[temp] = i;
            count = Math.max(count, v2[temp] - v1[temp] - 1);
        }
    }
    return count;
    }
}

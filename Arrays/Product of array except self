Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

You must write an algorithm that runs in O(n) time and without using the division operation.

 

Example 1:

Input: nums = [1,2,3,4]
Output: [24,12,8,6]
Example 2:

Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]

soln-
class Solution {
    public int[] productExceptSelf(int[] nums) {
        int n = nums.length;
        int[] answer = new int[n];
        int product = 1;
        int product0 = 0;
        for(int i=0; i<n; i++){
            if(nums[i] != 0){
                product *= nums[i];
            }
            else {
                product0++;
            }
        }
        for(int i=0; i<n; i++){
            if(nums[i] !=0){
                if(product0 == 0){
                    answer[i] = product/(nums[i]);
                }
                else 
                answer[i] = 0;
            }
            else {
                if(product0 == 1){
                    answer[i] = product;
                } 
                else {
                    answer[i] = 0;
                }
            }
        }
        return answer;
    }
}

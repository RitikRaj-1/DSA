//Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.

soln:-

class Solution {
    public int trap(int[] height) {
        int n = height.length;
        int[] leftbound = new int[n];
        leftbound[0] = height[0];
        for(int i=1; i<n; i++){
            leftbound[i] = Math.max(height[i],leftbound[i-1]);
        }
        int[] rightbound = new int[n];
        rightbound[n-1] = height[n-1];
        for(int j=n-2; j>=0; j--){
            rightbound[j] = Math.max(height[j],rightbound[j+1]);
        }
        int trappedwater = 0;
        for(int i=0; i<n; i++){
             int waterlevel = Math.min(leftbound[i], rightbound[i]);
             trappedwater += waterlevel - height[i];
        }
        return trappedwater;
    }
}
